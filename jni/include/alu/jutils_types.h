// Generated by Neo

#ifndef _JUTILS_TYPES_H_
#define _JUTILS_TYPES_H_

#include <stddef.h>
#include <stdint.h>

//#define _USE_OPENAL_
#define _ANDROID_PLATFORM_
//#define _COCOA_PLATFORM_

#define DISALLOW_EMPTY_AND_POINTER(ClassName) \
	ClassName(); \
	ClassName(const ClassName*)

#define DISALLOW_COPY_AND_ASSIGN(ClassName) \
	ClassName(const ClassName&); \
	void operator=(const ClassName&)

#define DISALLOW_NEW_INSTANCE(ClassName) \
    DISALLOW_COPY_AND_ASSIGN(ClassName); \
    DISALLOW_EMPTY_AND_POINTER(ClassName); \
    ~ClassName()

typedef enum _char_encoding {
	kEncUnkown, kEncASCII, kEncUTF8, kEncGBK,
} CharEncoding;

typedef enum _audio_source {
	kSourceDefault = 0, kSourceMIC = 1,
} AudioSource;

typedef enum _sample_rate {
	kRateDefault = 8000, kRateWaveConfig = 48000,
} SampleRate;

typedef enum _channel_config {
	kChannelDefault = 1, kChannelMono = 2, kChannelStereo = 3,
} ChannelConfig;

typedef enum _encoding_pcm_bit {
	kPCM8bit = 3, kPCM16bit = 2,
} PCMBit;

typedef enum _mute_pcm {
	kMuteSigned = 0, kMuteU8 = 0x80, kMuteU16 = 0x8000,
} MutePCM;

typedef enum _encoding_type {
	kEncodeS8, kEncodeU8, kEncodeS16, kEncodeU16,
} EncodeType;

typedef enum _report_what {
	kWhatALU, kWhatTrack, kWhatRecord,
} ReportWhat;

typedef enum _report_arg1 {
	k1Nil, k1Play, k1Capture,
} ReportArg1;

typedef enum _report_arg2 {
	k2Nil, k2Started, k2Stopped, k2AutoStopped,
} ReportArg2;

typedef unsigned char byte;
typedef void (*fetch)(const byte* data, size_t length);
typedef void (*report)(ReportWhat what, ReportArg1 arg1, ReportArg2 arg2,
		const void* data);

#endif /* _JUTILS_TYPES_H_ */
