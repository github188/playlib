// Generated by Neo

#ifndef _NPLAYER_TYPES_H_
#define _NPLAYER_TYPES_H_

#include <stddef.h>
#include <stdint.h>

namespace nplayer {
typedef unsigned char byte;
typedef void (*fetch_cb)(const byte* data, size_t size, uint64_t ts);

typedef enum _nplayer_arg1 {
    kArg1AudioPlayerStart,
    kArg1AudioPlayerWorking,
    kArg1AudioPlayerStop,
    kArg1AudioRecordStart,
    kArg1AudioRecordWorking,
    kArg1AudioRecordStop,
} NPlayerArg1;

typedef enum _nplayer_arg2 {
    kArg2Success,
    kArg2Fin,
    kArg2Mute,
    kArg2Failed,
    kArg2Error,
    kArg2FatalError,
} NPlayerArg2;

typedef enum _audio_type {
    kATypeAMR,
    kATypeALaw,
    kATypeULaw,
    kAType729,
    kATypeRawPCM,
} AudioType;

typedef enum _encoding_type {
    kEncodeS8,
    kEncodeU8,
    kEncodeS16,
    kEncodeU16,
} EncodeType;

typedef enum _mute_pcm {
    kMuteSigned = 0,
    kMuteU8 = 0x80,
    kMuteU16 = 0x8000,
} MutePCM;

typedef enum _video_type {
    kVTypeLegacy,
    kVTypeH264,
    kVTypeH265,
} VideoType;

typedef enum _video_frame_type {
    kFTypeA,
    kFTypeB,
    kFTypeI,
    kFTypeP,
    kFTypeFlush,
    kFTypeColor,
    kFTypeFin,
} VideoFrameType;

typedef enum _play_type {
    kPTypeByFile,
    kPTypeByFPS,
    kPTypeByTimeStamp,
} PlayType;

typedef struct _play_suit {
    int index;
    int window;

    AudioType audio_type;
    int audio_sample_rate;
    int audio_channel_per_frame;
    int audio_bit_per_channel;
    int audio_frame_block;

    VideoType video_type;
    int video_width;
    int video_height;
    float video_fps;
    char* thumb_path;

    PlayType play_type;
    char* video_path;

    bool enable_denoise;
    bool enable_vad;
    int noise_suppress;

    bool enable_aec;
    int echo_suppress;
    int echo_suppress_active;
} PlaySuit;

typedef struct _color {
    int alpha;
    int red;
    int green;
    int blue;
} Color;
} /* namespace: nplayer */

#endif /* _NPLAYER_TYPES_H_ */
